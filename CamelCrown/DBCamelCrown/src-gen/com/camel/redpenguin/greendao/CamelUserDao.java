package com.camel.redpenguin.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.camel.redpenguin.greendao.CamelUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CAMEL_USER.
*/
public class CamelUserDao extends AbstractDao<CamelUser, Long> {

    public static final String TABLENAME = "CAMEL_USER";

    /**
     * Properties of entity CamelUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserAccount = new Property(1, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property UserPassword = new Property(2, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserPhonetype = new Property(3, String.class, "userPhonetype", false, "USER_PHONETYPE");
        public final static Property UserLatitude = new Property(4, String.class, "userLatitude", false, "USER_LATITUDE");
        public final static Property UserLongitude = new Property(5, String.class, "userLongitude", false, "USER_LONGITUDE");
        public final static Property UserNike = new Property(6, String.class, "userNike", false, "USER_NIKE");
        public final static Property UserPhoneIdentify = new Property(7, String.class, "userPhoneIdentify", false, "USER_PHONE_IDENTIFY");
        public final static Property UserAdministrator = new Property(8, String.class, "userAdministrator", false, "USER_ADMINISTRATOR");
        public final static Property UserUpdateDate = new Property(9, String.class, "userUpdateDate", false, "USER_UPDATE_DATE");
        public final static Property UserCreateDate = new Property(10, String.class, "userCreateDate", false, "USER_CREATE_DATE");
    };


    public CamelUserDao(DaoConfig config) {
        super(config);
    }
    
    public CamelUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CAMEL_USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ACCOUNT' TEXT NOT NULL ," + // 1: userAccount
                "'USER_PASSWORD' TEXT NOT NULL ," + // 2: userPassword
                "'USER_PHONETYPE' TEXT," + // 3: userPhonetype
                "'USER_LATITUDE' TEXT," + // 4: userLatitude
                "'USER_LONGITUDE' TEXT," + // 5: userLongitude
                "'USER_NIKE' TEXT," + // 6: userNike
                "'USER_PHONE_IDENTIFY' TEXT," + // 7: userPhoneIdentify
                "'USER_ADMINISTRATOR' TEXT," + // 8: userAdministrator
                "'USER_UPDATE_DATE' TEXT," + // 9: userUpdateDate
                "'USER_CREATE_DATE' TEXT);"); // 10: userCreateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CAMEL_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CamelUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserAccount());
        stmt.bindString(3, entity.getUserPassword());
 
        String userPhonetype = entity.getUserPhonetype();
        if (userPhonetype != null) {
            stmt.bindString(4, userPhonetype);
        }
 
        String userLatitude = entity.getUserLatitude();
        if (userLatitude != null) {
            stmt.bindString(5, userLatitude);
        }
 
        String userLongitude = entity.getUserLongitude();
        if (userLongitude != null) {
            stmt.bindString(6, userLongitude);
        }
 
        String userNike = entity.getUserNike();
        if (userNike != null) {
            stmt.bindString(7, userNike);
        }
 
        String userPhoneIdentify = entity.getUserPhoneIdentify();
        if (userPhoneIdentify != null) {
            stmt.bindString(8, userPhoneIdentify);
        }
 
        String userAdministrator = entity.getUserAdministrator();
        if (userAdministrator != null) {
            stmt.bindString(9, userAdministrator);
        }
 
        String userUpdateDate = entity.getUserUpdateDate();
        if (userUpdateDate != null) {
            stmt.bindString(10, userUpdateDate);
        }
 
        String userCreateDate = entity.getUserCreateDate();
        if (userCreateDate != null) {
            stmt.bindString(11, userCreateDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CamelUser readEntity(Cursor cursor, int offset) {
        CamelUser entity = new CamelUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userAccount
            cursor.getString(offset + 2), // userPassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userPhonetype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userLatitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userLongitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userNike
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userPhoneIdentify
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userAdministrator
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userUpdateDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // userCreateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CamelUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserAccount(cursor.getString(offset + 1));
        entity.setUserPassword(cursor.getString(offset + 2));
        entity.setUserPhonetype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserLongitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserNike(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserPhoneIdentify(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserAdministrator(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserUpdateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserCreateDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CamelUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CamelUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
