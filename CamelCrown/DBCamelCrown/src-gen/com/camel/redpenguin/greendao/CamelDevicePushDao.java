package com.camel.redpenguin.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.camel.redpenguin.greendao.CamelDevicePush;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CAMEL_DEVICE_PUSH.
*/
public class CamelDevicePushDao extends AbstractDao<CamelDevicePush, Long> {

    public static final String TABLENAME = "CAMEL_DEVICE_PUSH";

    /**
     * Properties of entity CamelDevicePush.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DevicePushWorkState = new Property(1, String.class, "devicePushWorkState", false, "DEVICE_PUSH_WORK_STATE");
        public final static Property DevicePushElectricMode = new Property(2, String.class, "devicePushElectricMode", false, "DEVICE_PUSH_ELECTRIC_MODE");
        public final static Property DevicePushElectric = new Property(3, String.class, "devicePushElectric", false, "DEVICE_PUSH_ELECTRIC");
        public final static Property DevicePushSignal = new Property(4, String.class, "devicePushSignal", false, "DEVICE_PUSH_SIGNAL");
        public final static Property DevicePushUrgency = new Property(5, String.class, "devicePushUrgency", false, "DEVICE_PUSH_URGENCY");
        public final static Property DevicePushStep = new Property(6, String.class, "devicePushStep", false, "DEVICE_PUSH_STEP");
        public final static Property DevicePushLocaMode = new Property(7, String.class, "devicePushLocaMode", false, "DEVICE_PUSH_LOCA_MODE");
        public final static Property DevicePushLatitude = new Property(8, String.class, "devicePushLatitude", false, "DEVICE_PUSH_LATITUDE");
        public final static Property DevicePushLongtitude = new Property(9, String.class, "devicePushLongtitude", false, "DEVICE_PUSH_LONGTITUDE");
        public final static Property DevicePushIdentify = new Property(10, String.class, "devicePushIdentify", false, "DEVICE_PUSH_IDENTIFY");
        public final static Property DevicePushCreated = new Property(11, String.class, "devicePushCreated", false, "DEVICE_PUSH_CREATED");
        public final static Property DevicePushUpdated = new Property(12, String.class, "devicePushUpdated", false, "DEVICE_PUSH_UPDATED");
    };


    public CamelDevicePushDao(DaoConfig config) {
        super(config);
    }
    
    public CamelDevicePushDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CAMEL_DEVICE_PUSH' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DEVICE_PUSH_WORK_STATE' TEXT," + // 1: devicePushWorkState
                "'DEVICE_PUSH_ELECTRIC_MODE' TEXT," + // 2: devicePushElectricMode
                "'DEVICE_PUSH_ELECTRIC' TEXT," + // 3: devicePushElectric
                "'DEVICE_PUSH_SIGNAL' TEXT," + // 4: devicePushSignal
                "'DEVICE_PUSH_URGENCY' TEXT," + // 5: devicePushUrgency
                "'DEVICE_PUSH_STEP' TEXT," + // 6: devicePushStep
                "'DEVICE_PUSH_LOCA_MODE' TEXT," + // 7: devicePushLocaMode
                "'DEVICE_PUSH_LATITUDE' TEXT," + // 8: devicePushLatitude
                "'DEVICE_PUSH_LONGTITUDE' TEXT," + // 9: devicePushLongtitude
                "'DEVICE_PUSH_IDENTIFY' TEXT," + // 10: devicePushIdentify
                "'DEVICE_PUSH_CREATED' TEXT," + // 11: devicePushCreated
                "'DEVICE_PUSH_UPDATED' TEXT);"); // 12: devicePushUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CAMEL_DEVICE_PUSH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CamelDevicePush entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String devicePushWorkState = entity.getDevicePushWorkState();
        if (devicePushWorkState != null) {
            stmt.bindString(2, devicePushWorkState);
        }
 
        String devicePushElectricMode = entity.getDevicePushElectricMode();
        if (devicePushElectricMode != null) {
            stmt.bindString(3, devicePushElectricMode);
        }
 
        String devicePushElectric = entity.getDevicePushElectric();
        if (devicePushElectric != null) {
            stmt.bindString(4, devicePushElectric);
        }
 
        String devicePushSignal = entity.getDevicePushSignal();
        if (devicePushSignal != null) {
            stmt.bindString(5, devicePushSignal);
        }
 
        String devicePushUrgency = entity.getDevicePushUrgency();
        if (devicePushUrgency != null) {
            stmt.bindString(6, devicePushUrgency);
        }
 
        String devicePushStep = entity.getDevicePushStep();
        if (devicePushStep != null) {
            stmt.bindString(7, devicePushStep);
        }
 
        String devicePushLocaMode = entity.getDevicePushLocaMode();
        if (devicePushLocaMode != null) {
            stmt.bindString(8, devicePushLocaMode);
        }
 
        String devicePushLatitude = entity.getDevicePushLatitude();
        if (devicePushLatitude != null) {
            stmt.bindString(9, devicePushLatitude);
        }
 
        String devicePushLongtitude = entity.getDevicePushLongtitude();
        if (devicePushLongtitude != null) {
            stmt.bindString(10, devicePushLongtitude);
        }
 
        String devicePushIdentify = entity.getDevicePushIdentify();
        if (devicePushIdentify != null) {
            stmt.bindString(11, devicePushIdentify);
        }
 
        String devicePushCreated = entity.getDevicePushCreated();
        if (devicePushCreated != null) {
            stmt.bindString(12, devicePushCreated);
        }
 
        String devicePushUpdated = entity.getDevicePushUpdated();
        if (devicePushUpdated != null) {
            stmt.bindString(13, devicePushUpdated);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CamelDevicePush readEntity(Cursor cursor, int offset) {
        CamelDevicePush entity = new CamelDevicePush( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // devicePushWorkState
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // devicePushElectricMode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // devicePushElectric
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // devicePushSignal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // devicePushUrgency
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // devicePushStep
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // devicePushLocaMode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // devicePushLatitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // devicePushLongtitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // devicePushIdentify
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // devicePushCreated
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // devicePushUpdated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CamelDevicePush entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevicePushWorkState(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevicePushElectricMode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevicePushElectric(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevicePushSignal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevicePushUrgency(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDevicePushStep(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDevicePushLocaMode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDevicePushLatitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDevicePushLongtitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDevicePushIdentify(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDevicePushCreated(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDevicePushUpdated(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CamelDevicePush entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CamelDevicePush entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
