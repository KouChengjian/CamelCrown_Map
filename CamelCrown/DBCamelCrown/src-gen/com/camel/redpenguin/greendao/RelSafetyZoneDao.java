package com.camel.redpenguin.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.camel.redpenguin.greendao.RelSafetyZone;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REL_SAFETY_ZONE.
*/
public class RelSafetyZoneDao extends AbstractDao<RelSafetyZone, Long> {

    public static final String TABLENAME = "REL_SAFETY_ZONE";

    /**
     * Properties of entity RelSafetyZone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RelZoneIdentify = new Property(1, String.class, "relZoneIdentify", false, "REL_ZONE_IDENTIFY");
        public final static Property RelZoneName = new Property(2, String.class, "relZoneName", false, "REL_ZONE_NAME");
        public final static Property RelZoneAddr = new Property(3, String.class, "relZoneAddr", false, "REL_ZONE_ADDR");
        public final static Property RelZoneLatitude = new Property(4, String.class, "relZoneLatitude", false, "REL_ZONE_LATITUDE");
        public final static Property RelZoneLongtitude = new Property(5, String.class, "relZoneLongtitude", false, "REL_ZONE_LONGTITUDE");
        public final static Property RelZoneRadius = new Property(6, String.class, "relZoneRadius", false, "REL_ZONE_RADIUS");
        public final static Property RelZoneCreated = new Property(7, String.class, "relZoneCreated", false, "REL_ZONE_CREATED");
    };


    public RelSafetyZoneDao(DaoConfig config) {
        super(config);
    }
    
    public RelSafetyZoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REL_SAFETY_ZONE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REL_ZONE_IDENTIFY' TEXT," + // 1: relZoneIdentify
                "'REL_ZONE_NAME' TEXT," + // 2: relZoneName
                "'REL_ZONE_ADDR' TEXT," + // 3: relZoneAddr
                "'REL_ZONE_LATITUDE' TEXT," + // 4: relZoneLatitude
                "'REL_ZONE_LONGTITUDE' TEXT," + // 5: relZoneLongtitude
                "'REL_ZONE_RADIUS' TEXT," + // 6: relZoneRadius
                "'REL_ZONE_CREATED' TEXT);"); // 7: relZoneCreated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REL_SAFETY_ZONE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RelSafetyZone entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String relZoneIdentify = entity.getRelZoneIdentify();
        if (relZoneIdentify != null) {
            stmt.bindString(2, relZoneIdentify);
        }
 
        String relZoneName = entity.getRelZoneName();
        if (relZoneName != null) {
            stmt.bindString(3, relZoneName);
        }
 
        String relZoneAddr = entity.getRelZoneAddr();
        if (relZoneAddr != null) {
            stmt.bindString(4, relZoneAddr);
        }
 
        String relZoneLatitude = entity.getRelZoneLatitude();
        if (relZoneLatitude != null) {
            stmt.bindString(5, relZoneLatitude);
        }
 
        String relZoneLongtitude = entity.getRelZoneLongtitude();
        if (relZoneLongtitude != null) {
            stmt.bindString(6, relZoneLongtitude);
        }
 
        String relZoneRadius = entity.getRelZoneRadius();
        if (relZoneRadius != null) {
            stmt.bindString(7, relZoneRadius);
        }
 
        String relZoneCreated = entity.getRelZoneCreated();
        if (relZoneCreated != null) {
            stmt.bindString(8, relZoneCreated);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RelSafetyZone readEntity(Cursor cursor, int offset) {
        RelSafetyZone entity = new RelSafetyZone( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // relZoneIdentify
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // relZoneName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // relZoneAddr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // relZoneLatitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // relZoneLongtitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // relZoneRadius
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // relZoneCreated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RelSafetyZone entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRelZoneIdentify(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRelZoneName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRelZoneAddr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelZoneLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRelZoneLongtitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRelZoneRadius(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRelZoneCreated(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RelSafetyZone entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RelSafetyZone entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
