package com.camel.redpenguin.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.camel.redpenguin.greendao.CamelDeviceHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CAMEL_DEVICE_HISTORY.
*/
public class CamelDeviceHistoryDao extends AbstractDao<CamelDeviceHistory, Long> {

    public static final String TABLENAME = "CAMEL_DEVICE_HISTORY";

    /**
     * Properties of entity CamelDeviceHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceHistoryType = new Property(1, String.class, "deviceHistoryType", false, "DEVICE_HISTORY_TYPE");
        public final static Property DeviceHistoryLatitude = new Property(2, String.class, "deviceHistoryLatitude", false, "DEVICE_HISTORY_LATITUDE");
        public final static Property DeviceHistoryLongtitude = new Property(3, String.class, "deviceHistoryLongtitude", false, "DEVICE_HISTORY_LONGTITUDE");
        public final static Property DeviceHistoryIdentify = new Property(4, String.class, "deviceHistoryIdentify", false, "DEVICE_HISTORY_IDENTIFY");
        public final static Property DeviceHistoryPage = new Property(5, String.class, "deviceHistoryPage", false, "DEVICE_HISTORY_PAGE");
        public final static Property DeviceHistoryStep = new Property(6, String.class, "deviceHistoryStep", false, "DEVICE_HISTORY_STEP");
        public final static Property DeviceHistoryCreated = new Property(7, String.class, "deviceHistoryCreated", false, "DEVICE_HISTORY_CREATED");
        public final static Property DeviceHistoryTermination = new Property(8, String.class, "deviceHistoryTermination", false, "DEVICE_HISTORY_TERMINATION");
        public final static Property DeviceHistoryAllTime = new Property(9, String.class, "deviceHistoryAllTime", false, "DEVICE_HISTORY_ALL_TIME");
    };


    public CamelDeviceHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public CamelDeviceHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CAMEL_DEVICE_HISTORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DEVICE_HISTORY_TYPE' TEXT," + // 1: deviceHistoryType
                "'DEVICE_HISTORY_LATITUDE' TEXT," + // 2: deviceHistoryLatitude
                "'DEVICE_HISTORY_LONGTITUDE' TEXT," + // 3: deviceHistoryLongtitude
                "'DEVICE_HISTORY_IDENTIFY' TEXT," + // 4: deviceHistoryIdentify
                "'DEVICE_HISTORY_PAGE' TEXT," + // 5: deviceHistoryPage
                "'DEVICE_HISTORY_STEP' TEXT," + // 6: deviceHistoryStep
                "'DEVICE_HISTORY_CREATED' TEXT," + // 7: deviceHistoryCreated
                "'DEVICE_HISTORY_TERMINATION' TEXT," + // 8: deviceHistoryTermination
                "'DEVICE_HISTORY_ALL_TIME' TEXT);"); // 9: deviceHistoryAllTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CAMEL_DEVICE_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CamelDeviceHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceHistoryType = entity.getDeviceHistoryType();
        if (deviceHistoryType != null) {
            stmt.bindString(2, deviceHistoryType);
        }
 
        String deviceHistoryLatitude = entity.getDeviceHistoryLatitude();
        if (deviceHistoryLatitude != null) {
            stmt.bindString(3, deviceHistoryLatitude);
        }
 
        String deviceHistoryLongtitude = entity.getDeviceHistoryLongtitude();
        if (deviceHistoryLongtitude != null) {
            stmt.bindString(4, deviceHistoryLongtitude);
        }
 
        String deviceHistoryIdentify = entity.getDeviceHistoryIdentify();
        if (deviceHistoryIdentify != null) {
            stmt.bindString(5, deviceHistoryIdentify);
        }
 
        String deviceHistoryPage = entity.getDeviceHistoryPage();
        if (deviceHistoryPage != null) {
            stmt.bindString(6, deviceHistoryPage);
        }
 
        String deviceHistoryStep = entity.getDeviceHistoryStep();
        if (deviceHistoryStep != null) {
            stmt.bindString(7, deviceHistoryStep);
        }
 
        String deviceHistoryCreated = entity.getDeviceHistoryCreated();
        if (deviceHistoryCreated != null) {
            stmt.bindString(8, deviceHistoryCreated);
        }
 
        String deviceHistoryTermination = entity.getDeviceHistoryTermination();
        if (deviceHistoryTermination != null) {
            stmt.bindString(9, deviceHistoryTermination);
        }
 
        String deviceHistoryAllTime = entity.getDeviceHistoryAllTime();
        if (deviceHistoryAllTime != null) {
            stmt.bindString(10, deviceHistoryAllTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CamelDeviceHistory readEntity(Cursor cursor, int offset) {
        CamelDeviceHistory entity = new CamelDeviceHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceHistoryType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceHistoryLatitude
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceHistoryLongtitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceHistoryIdentify
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceHistoryPage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceHistoryStep
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deviceHistoryCreated
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceHistoryTermination
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // deviceHistoryAllTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CamelDeviceHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceHistoryType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceHistoryLatitude(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceHistoryLongtitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceHistoryIdentify(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceHistoryPage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceHistoryStep(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeviceHistoryCreated(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceHistoryTermination(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceHistoryAllTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CamelDeviceHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CamelDeviceHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
